<?php

namespace App\Http\Controllers;

use App\Models\BaseUserModels;
use App\Models\IndexModels;
use App\Models\ShopModels;
use App\Models\UserModels;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class UserController extends Controller
{
    //
    private $model;
    private $modelBase;
    private $modelUser;
    private $modelIndex;
    private $start=0;
    private $limit=1;

    public function __construct()
    {
        $this->model= new ShopModels();
        $this->modelBase=new BaseUserModels();
        $this->modelUser=new UserModels();
        $this->modelIndex=new IndexModels();

        // parent::__call($method, $parameters); // TODO: Change the autogenerated stub
    }



  public function index(Request $request)
  {
      //
      $user=auth()->user()->id;
      $code=$request->get('category');
      $categoryList=null;
      $ppk=null;
 if($code==null) $code=$request->code;

      switch ($code)
      {

          case 'messages' :
              $count=4;
              $data=$this->modelUser->getMessages($count);
              break;
          case 'likes':
              $count=6;
              $data=$this->modelUser->getLikes($count);
              break;
          case 'obavestenja':
              $count='sve';
              $data=$this->modelUser->getLikes($count);
              $code='obavestenja';
              break;
          case 'poruke':
              $count='sve';
              $data=$this->modelUser->getMessages($count);
              $code='obavestenja';
              break;
          case 'moji_oglasi':
              $data=$this->modelUser->getMyAds(auth()->user()->id,$this->start,$this->limit,$category=null);
              $code='oglasi';
              $categoryList = $this->modelIndex->subcategory();
              $ppk = $this->modelIndex->ppk();
              break;
          case 'pratim':
              $data=$this->modelUser->getFollowAds(auth()->user()->id,$this->start,$this->limit,$category=null);
              $code='oglasi';
              $categoryList = $this->modelIndex->subcategory();
              $ppk = $this->modelIndex->ppk();
              break;
          case 'noviUnos':
              $code='novUnos';
              $data=null;
              $categoryList=$this->modelIndex->category();
              break;

      }
     // dd($code);

      if ($request->code!=null) {
          return count($data) > 0 ? view('ajax.shop_ajax', ["userLi" => $data]) : ($data = 404);
      }
      else{

          return view('user',[
             'data'=>$data,
              'code'=>$code,
              'categoryList'=>$categoryList,
              'ppk'=>$ppk
          ]);


      }
      //dd($code);

  }

  public function more_products(Request $request)
  {


      $this->start=(int)$request->start*(int)$this->limit;
      $code=$request->code;
      $category=$request->category;

      if(strpos($code,'#'))
      {
          $string=explode('#',$code);
          $code=$string[0];

      }

      //dd($category);
      if($code=='moji_oglasi')
      {
          $data=$this->modelUser->getMyAds(auth()->user()->id,$this->start,$this->limit,$category);

      }
      else{
          $data=$this->modelUser->getFollowAds(auth()->user()->id,$this->start,$this->limit,$category);
      }



      return  count($data)>0 ?  view('ajax.shop_ajax', ["products" => $data]) : ($data=404) ;



  }

public function changeUserCategory(Request $request)
{
    $category=$request->category;
    $code=$request->code;

    if(strpos($code,'#'))
    {
        $string=explode('#',$code);
        $code=$string[0];

    }


    if ($code=='moji_oglasi')
    {
        $data=$this->modelUser->getMyAds(auth()->user()->id,$this->start,$this->limit,$category);
    }
    if($code=='pratim')
    {
        $data=$this->modelUser->getFollowAds(auth()->user()->id,$this->start,$this->limit,$category);

    }

    return  count($data)>0 ?  view('ajax.shop_ajax', ["products" => $data]) : ($data=404) ;

}
public function delete_product(Request $request)
{
    $password=$request->pass;
    $product_id=$request->id;


        $string=explode('#',$product_id);
        $product_id=$string[1];

       $user=$this->modelBase->userPassword(auth()->user()->id);


        $check=Hash::check($password, $user->password);

     if($check==false)
     {
         $data=419;
     }
     if($check==true)
     {
         //brisanje

         $data=$this->modelUser->deleteProduct($product_id);

        if($data!=201)
        {
            $data=404;
        }

     }

         return ($data);

}

public function insert_product(Request $request)
{
    //dd($request->);
   // dd($request);
    $this->modelUser->nameProduct = $request->nameProduct;
    $this->modelUser->description = $request->description;
    $this->modelUser->price = $request->price;
    $this->modelUser->ppk = $request->ppk;
     $ppk=$this->modelIndex->ppk($request->ppk);

    // dd($ppk);
     $this->modelUser->ppk=$ppk[0]->id_ppk;


    $this->modelUser->currency = $request->currency;
    $this->modelUser->condition = $request->condition;
    $this->modelUser->priceStatus = $request->priceStatus;
    $this->modelUser->promotion = $request->promotion;
    $this->modelUser->personName = $request->personName;
    $this->modelUser->personLastName = $request->personLastName;
    $this->modelUser->personPhone = $request->personPhone;
    $this->modelUser->personPlace = $request->personPlace;
    $this->modelUser->personStreet = $request->personStreet;
    $this->modelUser->personJMBG = $request->personJMBG;
    $this->modelUser->personIDcard = $request->personIDcard;
    $counter = intval($request->counter);

   //dd($request->ch_accuracy);

    $validator = Validator::make($request->all(), [
        'nameProduct' => ['required', 'string', 'max:60', 'regex:/^[\w\s]{1,60}$/'],
        'description' => ['required', 'string', 'max:2000', 'regex:/^[\w\s\d\W]{1,2000}$/'],
        'price' => ['required', 'numeric'],
        'ppk' => ['required'],
        'condition' => ['required', 'not_in:0'],
        'priceStatus' => ['required', 'in:1,2,3'],
        'currency' => ['required', 'in:1,2'],
        'ch_accuracy' => ['required', 'in:1'],
        'ch_terms' => ['required', 'in:1'],
        'personName' => ['required', 'string', 'max:25', 'regex:/^[A-ZČĆŽĐŠ][a-zčćžđš]+(\s[A-ZČĆŽĐŠ][a-zčćžđš]+)*$/'],
        'personLastName' => ['required', 'string', "regex:/^[A-ZČĆĐŽŠ][a-zčćšđž]+(([',. -][a-zčćšđžA-ZČĆĐŽŠ ])?[a-zčćšđžA-ZČĆĐŽŠ]*)*$/"],
        'personPhone' => ['required', 'string', 'regex:/^(\+3816|06)[01234569]{1}[0-9]{6,7}$/'],
        'personPlace' => ['required', 'string', 'regex:/^[A-z]+([\s][A-z]+)*$/'],
        'personStreet' => ['required', 'string', 'regex:/^[A-z]*\s([A-z]+\s)*[\d]([\d]{1,2}|[-\d]{2,4})?$/'],
        'personJMBG' => ['required', 'string', 'regex:/^([0-9][1-9]|([1-9][0-9])){2}(([0]{2}[0-2])|([9][2-9][0-9]))[0-9]{6}$/'],
        'personIDcard' => ['required', 'string', 'regex:/^[0-9]{9}$/'],
        [
            'personName.required' => ['Ime je obavezno'],
            'personLastName.required' => ['Prezime je obavezno'],
            'personPhone.required' => ['Polje za telefon je obavezno'],
            'personPlace.required' => ['Polje za grad je je obavezno'],
            'personStreet.required' => ['Polje za ulicu je obavezno'],
            'personJMBG.required' => ['Polje za JMBG je obavezno'],
            'personIDcard.required' => ['Polje za ličnu kartu je obavezno'],
            //itd itdd, finish this


        ]
    ]);


    if ($validator->passes()) {




            $idInsert = $this->modelUser->insert_product();
//dd($idInsert);
            if (strlen($idInsert)<4) {
                $counter_picture = 0;

                $fileName1 = 0;
                for ($i = 0; $i < $counter; $i++) {

                    if ($request->file("file$i") != null && $request->file("file$i") != "") {


                        $file = $request->file("file$i");
                        //dd($file);
                        $this->validate($request, [
                            'file' . $i => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048'
                        ]);

                        $fileName = $file->getClientOriginalName();
                        $fileName1 = time() . "_" . $fileName;
                        public_path("images");

                        //$public_path="img";
                        $file->move(public_path('images'), $fileName1);


                        $codePicture = $this->modelUser->insert_picture($idInsert,$fileName,$fileName1);
//dd($codePicture);
                        if ($codePicture == 201) $counter_picture++;

                    }
                    else{
                      //greska insert slike
                    }



                }
                if($counter_picture>0)
                {
                    return ($code = 201);

                    //provera promocija
                    //unos promocijee..



                }
                else{
                    //brisanje proizvoda
                    //slike neuspeh

                    $this->modelUser->deleteProduct($idInsert);

                }

                //counter_picture check
                //promotion

            }



        }

        else {

        return response()->json(['error' => $validator->errors()->all()]);
    }

}
public function get_subcategory(Request $request)
{

    $cat=$request->cat;

    $data=$this->modelIndex->subcategory($cat);

    return ($data);

}
public function get_ppk(Request $request)
{

    $cat=$request->cat;
    $data=$this->modelIndex->ppk($cat);

    return ($data);

}






}

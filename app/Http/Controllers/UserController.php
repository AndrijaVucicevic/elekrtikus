<?php

namespace App\Http\Controllers;

use App\Models\BaseUserModels;
use App\Models\IndexModels;
use App\Models\ShopModels;
use App\Models\UserModels;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;


class UserController extends Controller
{
    //
    private $model;
    private $modelBase;
    private $modelUser;
    private $modelIndex;
    private $start=0;
    private $limit=1;
    private $prom1=1450;
    private $prom2=3450;

    public function __construct()
    {
        $this->model= new ShopModels();
        $this->modelBase=new BaseUserModels();
        $this->modelUser=new UserModels();
        $this->modelIndex=new IndexModels();

        // parent::__call($method, $parameters); // TODO: Change the autogenerated stub
    }



  public function index(Request $request)
  {
      //
      $user=auth()->user()->id;
      $code=$request->get('category');
      $categoryList=null;
      $ppk=null;
 if($code==null) $code=$request->code;

      switch ($code)
      {

          case 'messages' :
              $count=4;
              $data=$this->modelUser->getMessages($count);
              break;
          case 'likes':
              $count=6;
              $data=$this->modelUser->getLikes($count);
              break;
          case 'obavestenja':
              $count='sve';
              $data=$this->modelUser->getLikes($count);
              $code='obavestenja';
              break;
          case 'poruke':
              $count='sve';
              $data=$this->modelUser->getMessages($count);
              $code='obavestenja';
              break;
          case 'moji_oglasi':
              $data=$this->modelUser->getMyAds(auth()->user()->id,$this->start,$this->limit,$category=null);
              $code='oglasi';
              $categoryList = $this->modelIndex->subcategory();
              $ppk = $this->modelIndex->ppk();
              break;
          case 'pratim':
              $data=$this->modelUser->getFollowAds(auth()->user()->id,$this->start,$this->limit,$category=null);
              $code='oglasi';
              $categoryList = $this->modelIndex->subcategory();
              $ppk = $this->modelIndex->ppk();
              break;
          case 'noviUnos':
              $code='novUnos';
              $data=null;
              $categoryList=$this->modelIndex->category();
              break;
          case 'moji_podaci':
              $code='moji_podaci';
               $data=$this->modelBase->getUser(auth()->user()->id);

           //   Javascript::put([ 'user.name' => $data->name, 'user.email' => $data->email ,'user.lastName'=> $data->lastName ,'user.username'=>$data->username,'user.role_name'=>$data->role_name]);

              break;

      }
     // dd($code);

      if ($request->code!=null) {
          return count($data) > 0 ? view('ajax.shop_ajax', ["userLi" => $data]) : ($data = 404);
      }
      else{

          return view('user',[
             'data'=>$data,
              'code'=>$code,
              'categoryList'=>$categoryList,
              'ppk'=>$ppk
          ]);


      }
      //dd($code);

  }

  public function more_products(Request $request)
  {


      $this->start=(int)$request->start*(int)$this->limit;
      $code=$request->code;
      $category=$request->category;

      if(strpos($code,'#'))
      {
          $string=explode('#',$code);
          $code=$string[0];

      }

      //dd($category);
      if($code=='moji_oglasi')
      {
          $data=$this->modelUser->getMyAds(auth()->user()->id,$this->start,$this->limit,$category);
//dd($data);
      }
      else{
          $data=$this->modelUser->getFollowAds(auth()->user()->id,$this->start,$this->limit,$category);
      }



      return  count($data)>0 ?  view('ajax.shop_ajax', ["products" => $data]) : ($data=404) ;



  }

public function changeUserCategory(Request $request)
{
    $category=$request->category;
    $code=$request->code;

    if(strpos($code,'#'))
    {
        $string=explode('#',$code);
        $code=$string[0];

    }


    if ($code=='moji_oglasi')
    {
        $data=$this->modelUser->getMyAds(auth()->user()->id,$this->start,$this->limit,$category);
        //dd($data);
    }
    if($code=='pratim')
    {
        $data=$this->modelUser->getFollowAds(auth()->user()->id,$this->start,$this->limit,$category);

    }

    return  count($data)>0 ?  view('ajax.shop_ajax', ["products" => $data]) : ($data=404) ;

}
public function delete_product(Request $request)
{
    $password=$request->pass;
    $product_id=$request->id;


        $string=explode('#',$product_id);
        $product_id=$string[1];

      $check=$this->checkAuthUser($password);

     if($check==419)
     {
         $data=419;
     }
     if($check==201)
     {


         $data=$this->modelUser->deleteProduct($product_id);

        if($data!=201)
        {
            $data=404;
        }

     }

         return ($data);

}

public function insert_product(Request $request)
{
    //dd($request->);
   // dd($request);
    $this->modelUser->nameProduct = $request->nameProduct;
    $this->modelUser->description = $request->description;
    $this->modelUser->price = $request->price;
    $this->modelUser->ppk = $request->ppk;
     $ppk=$this->modelIndex->ppk($request->ppk);

   // dd($request->ppk);
     $this->modelUser->ppk=$ppk[0]->id_ppk;


    $this->modelUser->currency = $request->currency;
    $this->modelUser->condition = $request->condition;
    $this->modelUser->priceStatus = $request->priceStatus;
    $this->modelUser->promotion = $request->promotion;
    $this->modelUser->personName = $request->personName;
    $this->modelUser->personLastName = $request->personLastName;
    $this->modelUser->personPhone = $request->personPhone;
    $this->modelUser->personPlace = $request->personPlace;
    $this->modelUser->personStreet = $request->personStreet;
    $this->modelUser->personJMBG = $request->personJMBG;
    $this->modelUser->personIDcard = $request->personIDcard;
    $counter = intval($request->counter);
    $idUpdate=$request->idUpdate;

   //dd($request->ch_accuracy);

    $validator = Validator::make($request->all(), [
        'nameProduct' => ['required', 'string', 'max:60', 'regex:/^[\w\s]{1,60}$/'],
        'description' => ['required', 'string', 'max:2000', 'regex:/^[\w\s\d\W]{1,2000}$/'],
        'price' => ['required', 'numeric'],
        'ppk' => ['required'],
        'condition' => ['required', 'not_in:0'],
        'priceStatus' => ['required', 'in:1,2,3,5'],
        'currency' => ['required', 'in:1,2'],
        'ch_accuracy' => ['required', 'in:1'],
        'ch_terms' => ['required', 'in:1'],
        'personName' => ['required', 'string', 'max:25', 'regex:/^[A-ZČĆŽĐŠ][a-zčćžđš]+(\s[A-ZČĆŽĐŠ][a-zčćžđš]+)*$/'],
        'personLastName' => ['required', 'string', "regex:/^[A-ZČĆĐŽŠ][a-zčćšđž]+(([',. -][a-zčćšđžA-ZČĆĐŽŠ ])?[a-zčćšđžA-ZČĆĐŽŠ]*)*$/"],
        'personPhone' => ['required', 'string', 'regex:/^(\+3816|06)[01234569]{1}[0-9]{6,7}$/'],
        'personPlace' => ['required', 'string', 'regex:/^[A-z]+([\s][A-z]+)*$/'],
        'personStreet' => ['required', 'string', 'regex:/^[A-z]*\s([A-z]+\s)*[\d]([\d]{1,2}|[-\d]{2,4})?$/'],
        'personJMBG' => ['required', 'string', 'regex:/^([0-9][1-9]|([1-9][0-9])){2}(([0]{2}[0-2])|([9][2-9][0-9]))[0-9]{6}$/'],
        'personIDcard' => ['required', 'string', 'regex:/^[0-9]{9}$/'],
        [
            'personName.required' => ['Ime je obavezno'],
            'personLastName.required' => ['Prezime je obavezno'],
            'personPhone.required' => ['Polje za telefon je obavezno'],
            'personPlace.required' => ['Polje za grad je je obavezno'],
            'personStreet.required' => ['Polje za ulicu je obavezno'],
            'personJMBG.required' => ['Polje za JMBG je obavezno'],
            'personIDcard.required' => ['Polje za ličnu kartu je obavezno'],
            //itd itdd, finish this


        ]
    ]);


    if ($validator->passes()) {
       // dd($counter);
        $counter_picture = 0;

          if ($idUpdate!='null')
          {
             $code= $this->modelUser->update_product($idUpdate);
            // dd($code);
          if($code==201)
          {
              //picture change
              $number_picture=$this->modelUser->getPicture($idUpdate);


              $fileName1 = 0;

              for ($i = 0; $i < 10; $i++) {


//insert new picture
                      if ($request->file("file$i") != null && $request->file("file$i") != "") {


                          $file = $request->file("file$i");
                          //dd($file);
                          $this->validate($request, [
                              'file' . $i => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048'
                          ]);

                          $fileName = $file->getClientOriginalName();
                          $fileName1 = time() . "_" . $fileName;
                          public_path("images");

                          //$public_path="img";
                          $file->move(public_path('images'), $fileName1);

                             if($i==0) {
                                 $codePicture = $this->modelUser->insert_picture($idUpdate, $fileName, $fileName1,$cat=1);
//dd($codePicture);
                             }
                             else{
                                 $codePicture = $this->modelUser->insert_picture($idUpdate, $fileName, $fileName1);

                             }

                          if ($codePicture == 201) {
                              $counter_picture++;
                          //delete picture
                              for ($n=0;$n<count($number_picture);$n++)
                              {
                                  //check if the old image has been replaced
                                  if($i==$n)
                                  {
                                         //delete picture
                                         $fileDeleteName=$this->modelUser->deleteProduct($number_picture[$n]->id_picture);
                                          File::delete($fileDeleteName);
                                  }




                              }

                      } else {
                          //error slika nije ubacena
                      }

                  }

              }
//check
              $updated_picture=$this->modelUser->getPicture($idUpdate);
              if(count($updated_picture)>0) {
                  //delete other picture that are deleted from js
                  $delete_picture = explode('#', $request->changePicture);
                  if (isset($request->changePicture))
                  {
                      for ($i = 0; $i < count($delete_picture); $i++) {

                          $count_tag = substr($delete_picture[$i], 4);
                          for ($x = 0; $x < count($number_picture); $x++) {
                              if ($count_tag[1] == $x) {
                                  $fileDeleteName = $this->modelUser->deletePicture($number_picture[$i]->id_picture);
                                  //delete filee
                                  File::delete($fileDeleteName);
                                  if ($count_tag[1] = 0) {
                                      //izmena picture_cat
                                      $this->modelUser->pictureUpdateCat($idUpdate);

                                  }
                              }
                          }


                      }
              }


              }

          }
//promotion check

//dd($idUpdate);
          }
          if ($idUpdate=='null') {
//dd($idUpdate);
              $idInsert = $this->modelUser->insert_product();
              if (strlen($idInsert)<5) {
//dd($idInsert);
                  $fileName1 = 0;
                  for ($i = 0; $i < $counter; $i++) {

                      if ($request->file("file$i") != null && $request->file("file$i") != "") {


                          $file = $request->file("file$i");
                          //dd($file);
                          $this->validate($request, [
                              'file' . $i => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048'
                          ]);

                          $fileName = $file->getClientOriginalName();
                          $fileName1 = time() . "_" . $fileName;
                          public_path("images");

                          //$public_path="img";
                          $file->move(public_path('images'), $fileName1);

                               if($counter_picture==0)
                               {
                                   $codePicture = $this->modelUser->insert_picture($idInsert, $fileName, $fileName1,$cat=1);
                               }
                               else {
                                   $codePicture = $this->modelUser->insert_picture($idInsert, $fileName, $fileName1);
//dd($codePicture);
                               }
                          if ($codePicture == 201) {
                              $counter_picture++;
                          }
                          else {
                              //error slika nije ubacena
                          }

                      }


                  }
              }
              else{


                  return ($data=500);

              }


          }

//dd($idInsert);


//counter

        $check_promotion=$this->modelIndex->sponsored($idUpdate);
          if(!isset($idInsert)) $idInsert=$idUpdate;
                if($check_promotion==null || $check_promotion==[] || $check_promotion->end_one==0 || $check_promotion->end_two==0)
                {

                    if ($request->promotion!=0 && $request->promotion>0)

                    {

                        //check bank account
                        $account=$this->modelUser->check_bank_account();

                        if($request->promotion==1)
                        {

                            if($account->current_state>1450)
                            {
                                   $code=$this->modelUser->insert_promotion_one($idInsert);
                                   if($code!=201)
                                   {
                                       //dd($code);
                                     return ($code=1);
                                   }
                            }
                            else{
                                return  ($code=422);
                            }




                        }
                        if ($request->promotion==2)
                        {
                            if($account->current_state>3450)
                            {
                                $code=$this->modelUser->insert_promotion_two($idInsert);
                                if($code!=201)
                                {
                                    return ($code=2);
                                }

                            }
                            else{
                                return  ($code=422);
                            }
                        }
                        if ($request->promotion==3)
                        {
                            if($account->current_state>4900)
                            {
                                $code2=$this->modelUser->insert_promotion_two($idInsert);
                                $code1=$this->modelUser->insert_promotion_one($idInsert);

                                if($code1!=201 && $code2!=201)
                                {
                                        return ($code=12);
                                }
                                if ($code1!=201)
                                {
                                    return ($code=1);
                                }
                                if($code2!=201)
                                {
                                    return ($code=2);
                                }

                            }
                            else{
                                if($account->current_state>3450)
                                {
                                    $code=$this->modelUser->insert_promotion_two($idInsert);
                                    if($code!=201)
                                    {
                                        return ($code=2);
                                    }

                                }
                                else{
                                    if($account->current_state>1450)
                                    {
                                        $code=$this->modelUser->insert_promotion_one($idInsert);
                                        if($code!=201)
                                        {
                                            return ($code=1);
                                        }

                                    }
                                    else{
                                             return ($code=422);
                                    }
                                }


                            }


                        }

                    }





                    return ($code = 201);

                }


                //counter_picture check
                //promotion

            }





        else {
                 dd($validator->errors()->all());
        return response()->json(['error' => $validator->errors()->all()]);
    }

}
public function get_subcategory(Request $request)
{

    $cat=$request->cat;

    $data=$this->modelIndex->subcategory($cat);

    return ($data);

}
public function get_ppk(Request $request)
{

    $cat=$request->cat;
    $data=$this->modelIndex->ppk($cat);

    return ($data);

}
public function change_product(Request $request)
{

    $product_id=$request->id;


    $array=explode('_',$product_id);

    $number=count($array);
    //dd($number);


    $data=$this->modelUser->getUserProduct($array[((int)$number)-1]);
    //dd($data[0]->id_category);
    $category=$this->modelIndex->category();
    $subcategory=$this->modelIndex->subcategory($data[0]->id_category);
    $ppk=$this->modelIndex->ppk();
    $sponsored=$this->modelIndex->sponsored($array[((int)$number)-1]);


    return ([
        'products'=>$data,
        'categories'=>$category,
        'subcategory'=>$subcategory,
        'ppk'=>$ppk,
        'sponsored'=>$sponsored
    ]);


}
public function user_change_pi(Request $request)
{
    $id=auth()->user()->id;
    $check=$this->checkAuthUser($request->password_change);


    if($check==419)
    {
        $data=419;
    }
    if($check==201)
    {
        //change user

        $data=$this->modelBase->changeUser($id);

         if($data==201 && isset($request->password_confirmation))
         {
             $data=$this->modelBase->changePasswordUser($id,$request->password_confirmation);
         }


    }

    return ($data);

}

public function checkAuthUser($password)
{


    $user=$this->modelBase->userPassword(auth()->user()->id);


    $check=Hash::check($password, $user->password);

    if($check==false)
    {
        $data=419;
    }
    if($check==true)
    {
        //brisanje
        $data=201;

    }
    return $data;

}




}
